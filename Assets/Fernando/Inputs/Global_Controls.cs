//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Fernando/Inputs/Global_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Global_Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Global_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Global_Controls"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""015e14dd-d652-4cfe-97bf-76f9f232a807"",
            ""actions"": [
                {
                    ""name"": ""SpawnPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""d7c21818-d581-4f8b-a144-77abfc568c0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartMission"",
                    ""type"": ""Button"",
                    ""id"": ""ae0af5ae-0c68-4388-a0a9-c6e84cd4cac1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f1a4e447-c263-4d5e-9c3f-01573d3c3c4d"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c7f3dfb-43ff-4abc-96a8-e2c235b9ef47"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83c958ea-174a-407e-9c76-7f436026aff0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMission"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c943c99f-bbca-450c-a5bc-22cca7822d78"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartMission"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_SpawnPlayer = m_Global.FindAction("SpawnPlayer", throwIfNotFound: true);
        m_Global_StartMission = m_Global.FindAction("StartMission", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Global
    private readonly InputActionMap m_Global;
    private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
    private readonly InputAction m_Global_SpawnPlayer;
    private readonly InputAction m_Global_StartMission;
    public struct GlobalActions
    {
        private @Global_Controls m_Wrapper;
        public GlobalActions(@Global_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnPlayer => m_Wrapper.m_Global_SpawnPlayer;
        public InputAction @StartMission => m_Wrapper.m_Global_StartMission;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
            @SpawnPlayer.started += instance.OnSpawnPlayer;
            @SpawnPlayer.performed += instance.OnSpawnPlayer;
            @SpawnPlayer.canceled += instance.OnSpawnPlayer;
            @StartMission.started += instance.OnStartMission;
            @StartMission.performed += instance.OnStartMission;
            @StartMission.canceled += instance.OnStartMission;
        }

        private void UnregisterCallbacks(IGlobalActions instance)
        {
            @SpawnPlayer.started -= instance.OnSpawnPlayer;
            @SpawnPlayer.performed -= instance.OnSpawnPlayer;
            @SpawnPlayer.canceled -= instance.OnSpawnPlayer;
            @StartMission.started -= instance.OnStartMission;
            @StartMission.performed -= instance.OnStartMission;
            @StartMission.canceled -= instance.OnStartMission;
        }

        public void RemoveCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalActions @Global => new GlobalActions(this);
    public interface IGlobalActions
    {
        void OnSpawnPlayer(InputAction.CallbackContext context);
        void OnStartMission(InputAction.CallbackContext context);
    }
}
